<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terraform Provider on Harvester manual test cases</title>
    <link>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/</link>
    <description>Recent content in Terraform Provider on Harvester manual test cases</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installation of the Harvester terraform provider</title>
      <link>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/install-terraform-provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/install-terraform-provider/</guid>
      <description>Follow the instruction of the README
Expected Results The provider is initialized and the terraform init command succeeds:
Initializing provider plugins... - Finding harvester/harvester versions matching &amp;quot;~&amp;gt; 0.1.0&amp;quot;... - Installing harvester/harvester v0.1.0... - Installed harvester/harvester v0.1.0 (unauthenticated) ... Terraform has been successfully initialized! </description>
    </item>
    
    <item>
      <title>Target Harvester by setting the variable kubeconfig with your kubeconfig file in the provider.tf file</title>
      <link>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-kubeconfig-variasble/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-kubeconfig-variasble/</guid>
      <description>Define the kubeconfig variable in the provider.tf file  terraform { required_providers { harvester = { source = &amp;quot;registry.terraform.io/harvester/harvester&amp;quot; version = &amp;quot;~&amp;gt; 0.1.0&amp;quot; } } } provider &amp;quot;harvester&amp;quot; { kubeconfig = &amp;quot;/path/of/my/kubeconfig&amp;quot; }  Check if you can interact with the Harvester by creating resource like a SSH key Execute the terraform apply command  Expected Results  The resource should be created Apply complete! Resources: 1 added, 0 changed, 0 destroyed.</description>
    </item>
    
    <item>
      <title>Target Harvester with the default kubeconfig located in $HOME/.kube/config</title>
      <link>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-kubeconfig-home/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-kubeconfig-home/</guid>
      <description> Make sure the kubeconfig is defined in the file $HOME/.kube/config Check if you can interact with the Harvester by creating resource like a SSH key Execute the terraform apply command  Expected Results  The resource should be created Apply complete! Resources: 1 added, 0 changed, 0 destroyed. Check if you can see your resource in the Harvester WebUI  </description>
    </item>
    
    <item>
      <title>Test a deployment with ALL resources at the same time</title>
      <link>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/deployment-all-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/deployment-all-resources/</guid>
      <description>Re-use the previous generated TF files and group them all either in one directory or in the same file Generates a speculative execution plan with terraform plan command Create the resources with terraform apply command Check that all resources are correctly created/running on the Harvester cluster Destroy the resources with the command terraform destroy  Expected Results Refer to the harvester_ssh_key resource expected results</description>
    </item>
    
    <item>
      <title>Test the harvester_clusternetwork resource</title>
      <link>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-clusternetwork-resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-clusternetwork-resource/</guid>
      <description>Refer to the harvester_ssh_key resource test steps</description>
    </item>
    
    <item>
      <title>Test the harvester_image resource</title>
      <link>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-image-resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-image-resource/</guid>
      <description>Refer to the harvester_ssh_key resource test steps</description>
    </item>
    
    <item>
      <title>Test the harvester_network resource</title>
      <link>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-network-resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-network-resource/</guid>
      <description>Refer to the harvester_ssh_key resource test steps</description>
    </item>
    
    <item>
      <title>Test the harvester_ssh_key resource</title>
      <link>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-ssh-key-resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-ssh-key-resource/</guid>
      <description>These following steps must be done for every resources, for avoiding repetitions, look at the detailed instructions at the beginning of the page.
 Import a resource Generates a speculative execution plan with terraform plan command Create the resource with terraform apply command Use terraform plan again Use terraform apply again Destroy the resource with the command terraform destroy  Expected Results  The resource is well imported in the terraform.</description>
    </item>
    
    <item>
      <title>Test the harvester_virtualmachine resource</title>
      <link>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-virtualmachine-resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-virtualmachine-resource/</guid>
      <description>Refer to the harvester_ssh_key resource test steps</description>
    </item>
    
    <item>
      <title>Test the harvester_volume resource</title>
      <link>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-volume-resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://noahgildersleeve.github.io/test-harvester-tests/manual/terraform-provider/harvester-volume-resource/</guid>
      <description>Refer to the harvester_ssh_key resource test steps</description>
    </item>
    
  </channel>
</rss>
